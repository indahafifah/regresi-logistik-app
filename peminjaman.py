# -*- coding: utf-8 -*-
"""Peminjaman.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FxqKTn8cpJMmzN9-sYk8F1m1eHqM2JWG
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import joblib
from sklearn.model_selection import StratifiedKFold, cross_val_score
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix, classification_report, roc_curve, auc

np.random.seed(42)

from google.colab import files
uploaded = files.upload()

file_path = "Dataset Peminjaman.xlsx"
df_train = pd.read_excel(file_path, sheet_name="Training Data")
df_test = pd.read_excel(file_path, sheet_name="Testing Data")

def check_missing(df, name):
    missing = df.isnull().sum()
    print(f"Missing values in {name}:\n", missing[missing > 0])

check_missing(df_train, "Training Data")
check_missing(df_test, "Testing Data")

df_train["Status Anggota"] = df_train["Status Anggota"].map({"Biasa": 1, "Luar Biasa": 0})
df_train["Status Pinjaman"] = df_train["Status Pinjaman"].map({"New Order": 1, "Repeat Order": 0})
df_train["Kelayakan"] = df_train["Kelayakan"].map({"Layak": 1, "Tidak Layak": 0})
df_test["Status Anggota"] = df_test["Status Anggota"].map({"Biasa": 1, "Luar Biasa": 0})
df_test["Status Pinjaman"] = df_test["Status Pinjaman"].map({"New Order": 1, "Repeat Order": 0})
df_test["Kelayakan"] = df_test["Kelayakan"].map({"Layak": 1, "Tidak Layak": 0})

features = ["Status Anggota", "Status Pinjaman", "Jumlah Simpanan", "Jumlah Pinjam", "Jangka Waktu"]
X_train = df_train[features]
y_train = df_train["Kelayakan"]
X_test = df_test[features]
y_test = df_test["Kelayakan"]

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

kf = StratifiedKFold(n_splits=5, shuffle=True, random_state=55)

model = LogisticRegression(class_weight='balanced')

scores = cross_val_score(model, X_train_scaled, y_train, cv=kf, scoring='accuracy')
print(f"Rata-rata Akurasi K-Fold: {scores.mean():.4f}")

model.fit(X_train_scaled, y_train)

coef_df = pd.DataFrame({"Feature": features, "Coefficient": model.coef_[0]})
print(coef_df.sort_values(by="Coefficient", ascending=False))

y_pred = model.predict(X_test_scaled)

cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=["Tidak Layak", "Layak"], yticklabels=["Tidak Layak", "Layak"])
plt.xlabel("Prediksi")
plt.ylabel("Aktual")
plt.title("Confusion Matrix")
plt.show()

print(classification_report(y_test, y_pred))

y_prob = model.predict_proba(X_test_scaled)[:, 1]
fpr, tpr, _ = roc_curve(y_test, y_prob)
roc_auc = auc(fpr, tpr)

plt.figure(figsize=(8,6))
plt.plot(fpr, tpr, color="blue", lw=2, label=f"AUC = {roc_auc:.2f}")
plt.plot([0, 1], [0, 1], color="gray", linestyle="--")
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("ROC Curve")
plt.legend(loc="lower right")
plt.show()

joblib.dump(model, "logistic_regression_model.pkl")
joblib.dump(scaler, "scaler.pkl")